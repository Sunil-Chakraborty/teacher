To reset or initialize the table from the Django shell:
-------------------------------------------------------------------
(teacher_env) D:\JU>python manage.py shell
quit 


from polls.models import VotingSession
VotingSession.objects.all().delete()

Optionally Reset the Auto-Increment Value
--------------------------------------------------------
from django.db import connection

For SQLite:
with connection.cursor() as cursor:
    cursor.execute("DELETE FROM sqlite_sequence WHERE name='polls_votingsession'")

For PostgreSQL:
with connection.cursor() as cursor:
    cursor.execute("ALTER SEQUENCE polls_votingsession_id_seq RESTART WITH 1;")

Caution:
Backup Data: If the table has important data, make sure to back it up before running the reset.

from polls.models import AccessID

Please provide first_name in vote.html from the following :

AUTH_USER_MODEL = 'teachers.CustomUser'

class VotingSession(models.Model):
    faculty = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    token_no = models.CharField(max_length=10, unique=True)
    course_name = models.CharField(max_length=255)
    session_start = models.DateTimeField()
    session_end = models.DateTimeField()
    student_no = models.IntegerField()

    def convert_to_ist(self):
        # Convert session_start and session_end from UTC to IST
        if self.session_start:
            self.session_start = self.session_start.astimezone(ist)
        if self.session_end:
            self.session_end = self.session_end.astimezone(ist)

App: teachers        
# Custom User model
class CustomUser(AbstractUser):
    username = None  # Remove the username field
    email = models.EmailField(unique=True)
    emp_id = models.CharField(max_length=50, unique=True)
    department = models.ForeignKey("Department", on_delete=models.SET_NULL, null=True, blank=True, related_name="users")
    

    USERNAME_FIELD = 'email'  # Use email as the login field
    REQUIRED_FIELDS = ['first_name', 'last_name', 'emp_id']  # Fields required when creating a user

    objects = CustomUserManager()

    def __str__(self):
        return f"{self.first_name}({self.email})"
               
def get_image_path(instance, filename):    
    return os.path.join('general', f"user_{instance.id}", filename)

App: teachers 
class Teacher(models.Model):
    user = models.OneToOneField(
        "CustomUser",
        null=True,
        on_delete=models.SET_NULL,
        related_name="teachers"
    )  # Refers to the CustomUser model
    
    email = models.EmailField(unique=True)
    emp_id = models.CharField(max_length=50, unique=True)
    first_name = models.CharField(verbose_name='Full Name', max_length=100, blank=True, null=True)  # Move first_name here
    dept_name = models.CharField(max_length=100, blank=True, null=True)  # Move first_name here

