# ==============================================================================
# DJANGO LIBRARY MANAGEMENT REST API
# ==============================================================================

# requirements.txt
"""
Django==4.2.7
djangorestframework==3.14.0
django-cors-headers==4.3.1
django-filter==23.3
"""

# ==============================================================================
# settings.py
# ==============================================================================

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key-here'
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django_filters',
    'library',  # Our main app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'library_project.urls'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ==============================================================================
# library/models.py
# ==============================================================================

from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator, MaxValueValidator
from datetime import date

class Author(models.Model):
    """Author model for book authors"""
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    birth_date = models.DateField(null=True, blank=True)
    biography = models.TextField(blank=True)
    nationality = models.CharField(max_length=100, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['last_name', 'first_name']

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"

class Genre(models.Model):
    """Genre model for book categories"""
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)

    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name

class Publisher(models.Model):
    """Publisher model"""
    name = models.CharField(max_length=200, unique=True)
    address = models.TextField(blank=True)
    website = models.URLField(blank=True)
    established_year = models.PositiveIntegerField(null=True, blank=True)

    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name

class Book(models.Model):
    """Main Book model"""
    CONDITION_CHOICES = [
        ('new', 'New'),
        ('excellent', 'Excellent'),
        ('good', 'Good'),
        ('fair', 'Fair'),
        ('poor', 'Poor'),
    ]

    # Basic Information
    title = models.CharField(max_length=200)
    isbn = models.CharField(max_length=13, unique=True)
    authors = models.ManyToManyField(Author, related_name='books')
    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE, related_name='books')
    genres = models.ManyToManyField(Genre, related_name='books')
    
    # Publication Details
    publication_date = models.DateField()
    pages = models.PositiveIntegerField(validators=[MinValueValidator(1)])
    language = models.CharField(max_length=50, default='English')
    edition = models.CharField(max_length=50, blank=True)
    
    # Library Management
    total_copies = models.PositiveIntegerField(default=1, validators=[MinValueValidator(1)])
    available_copies = models.PositiveIntegerField(default=1, validators=[MinValueValidator(0)])
    condition = models.CharField(max_length=20, choices=CONDITION_CHOICES, default='new')
    location = models.CharField(max_length=100, help_text="Shelf/Section location")
    
    # Additional Information
    description = models.TextField(blank=True)
    cover_image = models.ImageField(upload_to='book_covers/', blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    rating = models.DecimalField(
        max_digits=3, 
        decimal_places=2, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(0), MaxValueValidator(5)]
    )
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['title']
        indexes = [
            models.Index(fields=['isbn']),
            models.Index(fields=['title']),
            models.Index(fields=['publication_date']),
        ]

    def __str__(self):
        return self.title

    @property
    def is_available(self):
        return self.available_copies > 0

    @property
    def borrowed_copies(self):
        return self.total_copies - self.available_copies

    def clean(self):
        from django.core.exceptions import ValidationError
        if self.available_copies > self.total_copies:
            raise ValidationError("Available copies cannot exceed total copies")

class BorrowRecord(models.Model):
    """Model to track book borrowing"""
    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='borrow_records')
    borrower = models.ForeignKey(User, on_delete=models.CASCADE, related_name='borrowed_books')
    borrow_date = models.DateField(auto_now_add=True)
    due_date = models.DateField()
    return_date = models.DateField(null=True, blank=True)
    is_returned = models.BooleanField(default=False)
    fine_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    notes = models.TextField(blank=True)

    class Meta:
        ordering = ['-borrow_date']

    def __str__(self):
        return f"{self.book.title} - {self.borrower.username}"

    @property
    def is_overdue(self):
        if not self.is_returned and self.due_date < date.today():
            return True
        return False

    @property
    def days_overdue(self):
        if self.is_overdue:
            return (date.today() - self.due_date).days
        return 0

# ==============================================================================
# library/serializers.py
# ==============================================================================

from rest_framework import serializers
from .models import Book, Author, Genre, Publisher, BorrowRecord
from django.contrib.auth.models import User

class AuthorSerializer(serializers.ModelSerializer):
    full_name = serializers.ReadOnlyField()
    books_count = serializers.SerializerMethodField()

    class Meta:
        model = Author
        fields = ['id', 'first_name', 'last_name', 'full_name', 'birth_date', 
                 'biography', 'nationality', 'books_count', 'created_at', 'updated_at']

    def get_books_count(self, obj):
        return obj.books.count()

class GenreSerializer(serializers.ModelSerializer):
    books_count = serializers.SerializerMethodField()

    class Meta:
        model = Genre
        fields = ['id', 'name', 'description', 'books_count']

    def get_books_count(self, obj):
        return obj.books.count()

class PublisherSerializer(serializers.ModelSerializer):
    books_count = serializers.SerializerMethodField()

    class Meta:
        model = Publisher
        fields = ['id', 'name', 'address', 'website', 'established_year', 'books_count']

    def get_books_count(self, obj):
        return obj.books.count()

class BookListSerializer(serializers.ModelSerializer):
    """Lightweight serializer for book lists"""
    authors = serializers.StringRelatedField(many=True)
    publisher = serializers.StringRelatedField()
    genres = serializers.StringRelatedField(many=True)

    class Meta:
        model = Book
        fields = ['id', 'title', 'isbn', 'authors', 'publisher', 'genres', 
                 'publication_date', 'available_copies', 'total_copies', 
                 'is_available', 'rating', 'condition']

class BookDetailSerializer(serializers.ModelSerializer):
    """Detailed serializer for individual book views"""
    authors = AuthorSerializer(many=True, read_only=True)
    publisher = PublisherSerializer(read_only=True)
    genres = GenreSerializer(many=True, read_only=True)
    is_available = serializers.ReadOnlyField()
    borrowed_copies = serializers.ReadOnlyField()
    
    # Write fields for relationships
    author_ids = serializers.PrimaryKeyRelatedField(
        queryset=Author.objects.all(), many=True, write_only=True, source='authors'
    )
    publisher_id = serializers.PrimaryKeyRelatedField(
        queryset=Publisher.objects.all(), write_only=True, source='publisher'
    )
    genre_ids = serializers.PrimaryKeyRelatedField(
        queryset=Genre.objects.all(), many=True, write_only=True, source='genres'
    )

    class Meta:
        model = Book
        fields = '__all__'

    def validate(self, data):
        if data.get('available_copies', 0) > data.get('total_copies', 0):
            raise serializers.ValidationError(
                "Available copies cannot exceed total copies"
            )
        return data

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'first_name', 'last_name', 'email']

class BorrowRecordSerializer(serializers.ModelSerializer):
    book = BookListSerializer(read_only=True)
    borrower = UserSerializer(read_only=True)
    is_overdue = serializers.ReadOnlyField()
    days_overdue = serializers.ReadOnlyField()
    
    # Write fields
    book_id = serializers.PrimaryKeyRelatedField(
        queryset=Book.objects.all(), write_only=True, source='book'
    )
    borrower_id = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.all(), write_only=True, source='borrower'
    )

    class Meta:
        model = BorrowRecord
        fields = ['id', 'book', 'borrower', 'borrow_date', 'due_date', 'return_date', 
                 'is_returned', 'fine_amount', 'notes', 'is_overdue', 'days_overdue',
                 'book_id', 'borrower_id']

# ==============================================================================
# library/views.py
# ==============================================================================

from rest_framework import viewsets, status, filters
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from django_filters.rest_framework import DjangoFilterBackend
from django.db.models import Q
from datetime import date, timedelta
from .models import Book, Author, Genre, Publisher, BorrowRecord
from .serializers import (
    BookListSerializer, BookDetailSerializer, AuthorSerializer,
    GenreSerializer, PublisherSerializer, BorrowRecordSerializer
)

class AuthorViewSet(viewsets.ModelViewSet):
    queryset = Author.objects.all()
    serializer_class = AuthorSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['first_name', 'last_name', 'nationality']
    ordering_fields = ['last_name', 'first_name', 'birth_date']
    filterset_fields = ['nationality']

    @action(detail=True, methods=['get'])
    def books(self, request, pk=None):
        """Get all books by this author"""
        author = self.get_object()
        books = author.books.all()
        serializer = BookListSerializer(books, many=True)
        return Response(serializer.data)

class GenreViewSet(viewsets.ModelViewSet):
    queryset = Genre.objects.all()
    serializer_class = GenreSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name', 'description']
    ordering_fields = ['name']

    @action(detail=True, methods=['get'])
    def books(self, request, pk=None):
        """Get all books in this genre"""
        genre = self.get_object()
        books = genre.books.all()
        serializer = BookListSerializer(books, many=True)
        return Response(serializer.data)

class PublisherViewSet(viewsets.ModelViewSet):
    queryset = Publisher.objects.all()
    serializer_class = PublisherSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name', 'address']
    ordering_fields = ['name', 'established_year']

    @action(detail=True, methods=['get'])
    def books(self, request, pk=None):
        """Get all books from this publisher"""
        publisher = self.get_object()
        books = publisher.books.all()
        serializer = BookListSerializer(books, many=True)
        return Response(serializer.data)

class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.select_related('publisher').prefetch_related('authors', 'genres')
    permission_classes = [IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['title', 'isbn', 'authors__first_name', 'authors__last_name']
    ordering_fields = ['title', 'publication_date', 'rating', 'created_at']
    filterset_fields = ['genres', 'authors', 'publisher', 'condition', 'language']

    def get_serializer_class(self):
        if self.action == 'list':
            return BookListSerializer
        return BookDetailSerializer

    def get_queryset(self):
        queryset = super().get_queryset()
        
        # Filter by availability
        available = self.request.query_params.get('available')
        if available is not None:
            if available.lower() == 'true':
                queryset = queryset.filter(available_copies__gt=0)
            elif available.lower() == 'false':
                queryset = queryset.filter(available_copies=0)
        
        # Filter by publication year
        pub_year = self.request.query_params.get('publication_year')
        if pub_year:
            queryset = queryset.filter(publication_date__year=pub_year)
        
        # Filter by rating range
        min_rating = self.request.query_params.get('min_rating')
        max_rating = self.request.query_params.get('max_rating')
        if min_rating:
            queryset = queryset.filter(rating__gte=min_rating)
        if max_rating:
            queryset = queryset.filter(rating__lte=max_rating)
            
        return queryset

    @action(detail=False, methods=['get'])
    def available(self, request):
        """Get all available books"""
        books = self.queryset.filter(available_copies__gt=0)
        serializer = BookListSerializer(books, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def popular(self, request):
        """Get popular books (high rating)"""
        books = self.queryset.filter(rating__gte=4.0).order_by('-rating')[:10]
        serializer = BookListSerializer(books, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def recent(self, request):
        """Get recently added books"""
        books = self.queryset.order_by('-created_at')[:10]
        serializer = BookListSerializer(books, many=True)
        return Response(serializer.data)

    @action(detail=True, methods=['post'])
    def borrow(self, request, pk=None):
        """Borrow a book"""
        book = self.get_object()
        
        if not book.is_available:
            return Response(
                {'error': 'Book is not available for borrowing'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Create borrow record
        due_date = date.today() + timedelta(days=14)  # 2 weeks default
        borrow_record = BorrowRecord.objects.create(
            book=book,
            borrower=request.user,
            due_date=due_date
        )
        
        # Update available copies
        book.available_copies -= 1
        book.save()
        
        serializer = BorrowRecordSerializer(borrow_record)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @action(detail=True, methods=['post'])
    def return_book(self, request, pk=None):
        """Return a borrowed book"""
        book = self.get_object()
        
        try:
            borrow_record = BorrowRecord.objects.get(
                book=book,
                borrower=request.user,
                is_returned=False
            )
        except BorrowRecord.DoesNotExist:
            return Response(
                {'error': 'No active borrowing record found'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Mark as returned
        borrow_record.is_returned = True
        borrow_record.return_date = date.today()
        
        # Calculate fine if overdue
        if borrow_record.is_overdue:
            # $1 per day overdue
            borrow_record.fine_amount = borrow_record.days_overdue * 1.00
        
        borrow_record.save()
        
        # Update available copies
        book.available_copies += 1
        book.save()
        
        serializer = BorrowRecordSerializer(borrow_record)
        return Response(serializer.data)

class BorrowRecordViewSet(viewsets.ModelViewSet):
    queryset = BorrowRecord.objects.select_related('book', 'borrower')
    serializer_class = BorrowRecordSerializer
    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
    filterset_fields = ['is_returned', 'book', 'borrower']
    ordering_fields = ['borrow_date', 'due_date', 'return_date']

    def get_queryset(self):
        queryset = super().get_queryset()
        
        # Filter by overdue status
        overdue = self.request.query_params.get('overdue')
        if overdue is not None:
            if overdue.lower() == 'true':
                queryset = queryset.filter(
                    is_returned=False,
                    due_date__lt=date.today()
                )
        
        return queryset

    @action(detail=False, methods=['get'])
    def overdue(self, request):
        """Get all overdue books"""
        records = self.queryset.filter(
            is_returned=False,
            due_date__lt=date.today()
        )
        serializer = self.get_serializer(records, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def my_borrowed(self, request):
        """Get current user's borrowed books"""
        records = self.queryset.filter(
            borrower=request.user,
            is_returned=False
        )
        serializer = self.get_serializer(records, many=True)
        return Response(serializer.data)

# ==============================================================================
# library/urls.py
# ==============================================================================

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'books', views.BookViewSet)
router.register(r'authors', views.AuthorViewSet)
router.register(r'genres', views.GenreViewSet)
router.register(r'publishers', views.PublisherViewSet)
router.register(r'borrow-records', views.BorrowRecordViewSet)

urlpatterns = [
    path('api/', include(router.urls)),
    path('api-auth/', include('rest_framework.urls')),
]

# ==============================================================================
# Main project urls.py
# ==============================================================================

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('library.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# ==============================================================================
# library/admin.py
# ==============================================================================

from django.contrib import admin
from .models import Book, Author, Genre, Publisher, BorrowRecord

@admin.register(Author)
class AuthorAdmin(admin.ModelAdmin):
    list_display = ['full_name', 'nationality', 'birth_date']
    list_filter = ['nationality']
    search_fields = ['first_name', 'last_name']

@admin.register(Genre)
class GenreAdmin(admin.ModelAdmin):
    list_display = ['name']
    search_fields = ['name']

@admin.register(Publisher)
class PublisherAdmin(admin.ModelAdmin):
    list_display = ['name', 'established_year']
    list_filter = ['established_year']
    search_fields = ['name']

@admin.register(Book)
class BookAdmin(admin.ModelAdmin):
    list_display = ['title', 'isbn', 'publisher', 'publication_date', 
                   'total_copies', 'available_copies', 'condition']
    list_filter = ['genres', 'condition', 'language', 'publication_date']
    search_fields = ['title', 'isbn', 'authors__first_name', 'authors__last_name']
    filter_horizontal = ['authors', 'genres']

@admin.register(BorrowRecord)
class BorrowRecordAdmin(admin.ModelAdmin):
    list_display = ['book', 'borrower', 'borrow_date', 'due_date', 
                   'return_date', 'is_returned', 'fine_amount']
    list_filter = ['is_returned', 'borrow_date', 'due_date']
    search_fields = ['book__title', 'borrower__username']

# ==============================================================================
# SETUP INSTRUCTIONS
# ==============================================================================

"""
SETUP INSTRUCTIONS:

1. Install dependencies:
   pip install -r requirements.txt

2. Create Django project:
   django-admin startproject library_project
   cd library_project
   python manage.py startapp library

3. Apply the code above to respective files

4. Run migrations:
   python manage.py makemigrations
   python manage.py migrate

5. Create superuser:
   python manage.py createsuperuser

6. Run development server:
   python manage.py runserver

API ENDPOINTS:

Books:
- GET /api/books/ - List all books
- POST /api/books/ - Create new book
- GET /api/books/{id}/ - Get book details
- PUT/PATCH /api/books/{id}/ - Update book
- DELETE /api/books/{id}/ - Delete book
- GET /api/books/available/ - Get available books
- GET /api/books/popular/ - Get popular books
- POST /api/books/{id}/borrow/ - Borrow book
- POST /api/books/{id}/return_book/ - Return book

Authors:
- GET /api/authors/ - List authors
- POST /api/authors/ - Create author
- GET /api/authors/{id}/ - Get author details
- GET /api/authors/{id}/books/ - Get author's books

Genres:
- GET /api/genres/ - List genres
- POST /api/genres/ - Create genre
- GET /api/genres/{id}/books/ - Get genre's books

Publishers:
- GET /api/publishers/ - List publishers
- POST /api/publishers/ - Create publisher
- GET /api/publishers/{id}/books/ - Get publisher's books

Borrow Records:
- GET /api/borrow-records/ - List all records
- GET /api/borrow-records/overdue/ - Get overdue records
- GET /api/borrow-records/my_borrowed/ - Get user's borrowed books

QUERY PARAMETERS:
- ?search=term - Search across relevant fields
- ?available=true/false - Filter by availability
- ?publication_year=2023 - Filter by publication year
- ?min_rating=4.0 - Filter by minimum rating
- ?ordering=field - Order results
- ?genres=1,2 - Filter by genre IDs
"""

🚀 Key Features:
📚 Complete Library Management System

Books with detailed metadata (ISBN, authors, genres, publisher, etc.)
Authors with biographical information
Genres for categorization
Publishers with company details
Borrow Records to track book lending

🔧 Advanced REST API Capabilities

Full CRUD operations for all models
Search functionality across multiple fields
Filtering and ordering with query parameters
Pagination for large datasets
Custom endpoints for specific use cases

📖 Smart Book Management

Availability tracking (total vs available copies)
Borrowing system with due dates
Overdue detection with automatic fine calculation
Return processing with fine calculation
Inventory management

🔍 Advanced Query Features

Search books by title, author, or ISBN
Filter by availability, genre, rating, publication year
Get popular books (high ratings)
Get recently added books
Find overdue borrowings

👤 User Management

Authentication integration
Permission-based access (read-only for anonymous users)
Personal borrowing history
Overdue book tracking

🎯 Custom API Endpoints

/api/books/available/ - Available books only
/api/books/popular/ - Highly rated books
/api/books/{id}/borrow/ - Borrow a book
/api/books/{id}/return_book/ - Return a book
/api/borrow-records/overdue/ - Overdue books
/api/authors/{id}/books/ - Books by specific author

📋 API Documentation:
The script includes complete setup instructions and comprehensive API endpoint documentation. You can:

Filter and search across all models
Manage relationships between books, authors, genres, and publishers
Track borrowing with automatic due date and fine calculation
Handle inventory with copy management
Implement user permissions for different access levels

This is a fully functional library management system that can handle thousands of books and users efficiently